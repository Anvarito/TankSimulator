//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/PlayerInput/NewControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewControl"",
    ""maps"": [
        {
            ""name"": ""TankMovement"",
            ""id"": ""e4796219-1cad-496a-897d-d0c400502c1e"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""e2a2bc46-7bea-4623-8675-b110a02324cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6f909e3e-cd23-4710-a8ea-5eef9d22c19c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""334621fb-09e1-4c8d-b43d-37a56ac6d074"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(max=1),NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""f84b252d-211b-4e55-9654-9690cdff9990"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetTurret"",
                    ""type"": ""Button"",
                    ""id"": ""5f617fd8-85be-4d27-af78-ac8b4d25e9fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""4d296813-db3b-41d1-b995-595121ceca3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomIn"",
                    ""type"": ""Button"",
                    ""id"": ""6748226c-83a7-47d7-aa47-6ef6ed77614c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomOut"",
                    ""type"": ""Button"",
                    ""id"": ""48842d7e-16c9-4639-8305-161235b8ed42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12965938-19ac-4800-8fb0-55ca8855961d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6708f39-c5ed-40ed-95d1-fffeeb43f514"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ccc8de2-a65d-428d-ba7c-a6cb4b309cf4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ad9662a-e703-4ff7-94e0-26408403146a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8fc3357-26e3-4d80-9cf8-70713da55963"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetTurret"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9717dda8-d8b7-4e81-8936-875f313caa08"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad6d16a-386c-4a2d-a0de-3684ab78297b"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e204b0f-6441-4dfa-965c-43ddb84f5b77"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""776aa821-b7bb-43f0-93f3-abe1b7746b69"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TankMovement
        m_TankMovement = asset.FindActionMap("TankMovement", throwIfNotFound: true);
        m_TankMovement_Fire = m_TankMovement.FindAction("Fire", throwIfNotFound: true);
        m_TankMovement_Move = m_TankMovement.FindAction("Move", throwIfNotFound: true);
        m_TankMovement_Look = m_TankMovement.FindAction("Look", throwIfNotFound: true);
        m_TankMovement_Aim = m_TankMovement.FindAction("Aim", throwIfNotFound: true);
        m_TankMovement_ResetTurret = m_TankMovement.FindAction("ResetTurret", throwIfNotFound: true);
        m_TankMovement_Switch = m_TankMovement.FindAction("Switch", throwIfNotFound: true);
        m_TankMovement_ZoomIn = m_TankMovement.FindAction("ZoomIn", throwIfNotFound: true);
        m_TankMovement_ZoomOut = m_TankMovement.FindAction("ZoomOut", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TankMovement
    private readonly InputActionMap m_TankMovement;
    private List<ITankMovementActions> m_TankMovementActionsCallbackInterfaces = new List<ITankMovementActions>();
    private readonly InputAction m_TankMovement_Fire;
    private readonly InputAction m_TankMovement_Move;
    private readonly InputAction m_TankMovement_Look;
    private readonly InputAction m_TankMovement_Aim;
    private readonly InputAction m_TankMovement_ResetTurret;
    private readonly InputAction m_TankMovement_Switch;
    private readonly InputAction m_TankMovement_ZoomIn;
    private readonly InputAction m_TankMovement_ZoomOut;
    public struct TankMovementActions
    {
        private @NewControl m_Wrapper;
        public TankMovementActions(@NewControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_TankMovement_Fire;
        public InputAction @Move => m_Wrapper.m_TankMovement_Move;
        public InputAction @Look => m_Wrapper.m_TankMovement_Look;
        public InputAction @Aim => m_Wrapper.m_TankMovement_Aim;
        public InputAction @ResetTurret => m_Wrapper.m_TankMovement_ResetTurret;
        public InputAction @Switch => m_Wrapper.m_TankMovement_Switch;
        public InputAction @ZoomIn => m_Wrapper.m_TankMovement_ZoomIn;
        public InputAction @ZoomOut => m_Wrapper.m_TankMovement_ZoomOut;
        public InputActionMap Get() { return m_Wrapper.m_TankMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankMovementActions set) { return set.Get(); }
        public void AddCallbacks(ITankMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_TankMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TankMovementActionsCallbackInterfaces.Add(instance);
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @ResetTurret.started += instance.OnResetTurret;
            @ResetTurret.performed += instance.OnResetTurret;
            @ResetTurret.canceled += instance.OnResetTurret;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
            @ZoomIn.started += instance.OnZoomIn;
            @ZoomIn.performed += instance.OnZoomIn;
            @ZoomIn.canceled += instance.OnZoomIn;
            @ZoomOut.started += instance.OnZoomOut;
            @ZoomOut.performed += instance.OnZoomOut;
            @ZoomOut.canceled += instance.OnZoomOut;
        }

        private void UnregisterCallbacks(ITankMovementActions instance)
        {
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @ResetTurret.started -= instance.OnResetTurret;
            @ResetTurret.performed -= instance.OnResetTurret;
            @ResetTurret.canceled -= instance.OnResetTurret;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
            @ZoomIn.started -= instance.OnZoomIn;
            @ZoomIn.performed -= instance.OnZoomIn;
            @ZoomIn.canceled -= instance.OnZoomIn;
            @ZoomOut.started -= instance.OnZoomOut;
            @ZoomOut.performed -= instance.OnZoomOut;
            @ZoomOut.canceled -= instance.OnZoomOut;
        }

        public void RemoveCallbacks(ITankMovementActions instance)
        {
            if (m_Wrapper.m_TankMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITankMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_TankMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TankMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TankMovementActions @TankMovement => new TankMovementActions(this);
    public interface ITankMovementActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnResetTurret(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
        void OnZoomIn(InputAction.CallbackContext context);
        void OnZoomOut(InputAction.CallbackContext context);
    }
}
